{% extends 'OroUIBundle:Form:fields.html.twig' %}

{% block genemu_jqueryselect2_widget %}
    {{ form_widget(form, { 'attr': {'class': 'select2'} }) }}
    {{ form_javascript(form) }}
{% endblock %}

{% block genemu_jqueryselect2_javascript %}
    <script type="text/javascript">
        require(['underscore', 'jquery', 'oroform/js/select2-config'
            {%- if configs.extra_modules is defined and not configs.extra_modules is empty %}
                {%- for path in configs.extra_modules -%}
                    , '{{ path }}'
                {%- endfor -%}
            {% endif -%}
            , 'jquery.select2'],
        function(_, $, Select2Config
            {%- if configs.extra_modules is defined and not configs.extra_modules is empty %}
                {%- for name in configs.extra_modules|keys -%}
                    , {{ name }}
                {%- endfor -%}
            {% endif -%}
                ){
            var $field = $('#{{ id }}');

            {% block genemu_jqueryselect2_javascript_prototype %}
                {% set routeParameters = configs.route_parameters is defined ? configs.route_parameters : [] %}
                {% set url = configs.route_name is defined and configs.route_name ? path(configs.route_name, routeParameters) : '' %}
                {% if configs.placeholder is defined %}
                    {% set configs = configs|merge({'placeholder': configs.placeholder|trans }) %}
                {% endif %}
                {% if configs.result_template_twig is defined and configs.result_template_twig %}
                    {% set configs = configs|merge({'result_template': include(configs.result_template_twig) }) %}
                {% endif %}
                {% if configs.selection_template_twig is defined and configs.selection_template_twig %}
                    {% set configs = configs|merge({'selection_template': include(configs.selection_template_twig) }) %}
                {% endif %}

                var select2Config = {{ configs|json_encode|raw }};
                {% if configs.extra_config is defined and configs.extra_config %}
                    {{ block('oro_combobox_dataconfig_' ~ configs.extra_config) }}
                {% endif %}

                {% if excluded is not defined %}
                    {% set excluded = [] %}
                {% endif %}
                if ($field.length) {
                    var configurator = new Select2Config(
                        select2Config,
                        {{ url|json_encode|raw }},
                        {{ configs.per_page|default(10) }},
                        {{ excluded|json_encode|raw }}
                    );
                    select2Config = configurator.getConfig();
                }

                $field.select2(select2Config);

                $field.trigger('select2-init');
            {% endblock %}
        });
    </script>
{% endblock %}

{% block oro_ticker_symbol_widget %}
    <script type="text/javascript">
        require(['jquery', 'bootstrap'],
        function($){
            $(function() {
                var cache = {};
                $("#{{ id }}").typeahead({
                    source: function (request, process) {
                        YAHOO = {
                            Finance: {
                                SymbolSuggest: {
                                    ssCallback: function (data) {
                                        var result = $.map(data.ResultSet.Result, function (item) {
                                            return item.name + " (" + item.symbol + ")";
                                        });
                                        $.each(data.ResultSet.Result, function (itemKey, item) {
                                            cache[item.name + " (" + item.symbol + ")"] = item.symbol;
                                        });
                                        process(result)
                                    }
                                }
                            }
                        };
                        $.ajax({
                            type: "GET",
                            dataType: "jsonp",
                            jsonp: "callback",
                            jsonpCallback: "YAHOO.Finance.SymbolSuggest.ssCallback",
                            data: {
                                query: request
                            },
                            cache: true,
                            url: "http://autoc.finance.yahoo.com/autoc"
                        });
                    },
                    updater: function(item) {
                        if (typeof cache[item] != 'undefined') {
                            return cache[item];
                        } else {
                            return item;
                        }
                    }
                });
            });
        });
    </script>

    {{ form_widget(form) }}
{% endblock %}

{% block oro_combobox_dataconfig_autocomplete %}
    select2Config.ajax = {
        'url': {{ url|json_encode|raw }},
        'data': function (query, page) {
            return {
                'page': page,
                'per_page': {{ configs.per_page|default(10) }},
                'name': "{{ configs.autocomplete_alias }}",
                'query': query
            };
        },
        'results': function (data, page) {
            return data;
        }
    };
{% endblock %}

{% block oro_combobox_dataconfig_relation %}
    select2Config.ajax = {
        'url': {{ url|json_encode|raw }},
        'data': function (query, page) {
            return {
                'page': page,
                'per_page': {{ configs.per_page|default(10) }},
                'name': "{{ configs.autocomplete_alias }}",
                'query': query + ',{{ configs.target_entity }},{{ configs.target_field }}'
            };
        },
        'results': function (data, page) {
            return data;
        }
    };
{% endblock %}

{% block oro_combobox_dataconfig_grid %}
    {% set url = path('oro_datagrid_index', {'gridName': configs.grid.name}) %}
    {% set perPage = configs.per_page|default(10) %}

    select2Config.ajax = {
        'url': {{ url|json_encode|raw }},
        'data': function (query, page) {
            return {
                '{{ configs.grid.name }}[_pager][_page]': page,
                '{{ configs.grid.name }}[_pager][_per_page]': {{ perPage }},
                '{{ configs.grid.name }}[_sort_by][{{ configs.grid.sort_by|default(configs.properties[0]) }}]': "{{ configs.grid.sort_order|default('ASC') }}",
                '{{ configs.grid.name }}[_filter][{{ configs.properties[0] }}][type]': 1,
                '{{ configs.grid.name }}[_filter][{{ configs.properties[0] }}][value]': query
            };
        },
        'results': function (data, page) {
            return {
                results: data.data,
                more: page*{{ perPage }} < data.options.totalRecords
            };
        }
    };
{% endblock %}

{% block oro_multiple_entity_widget %}
    {{ form_widget(form) }}

    <style type="text/css">
        #{{ id }}-container .entity-item {
            padding: 5px 7px;
            margin-left: 0;
            margin-right: 1.5%;
            margin-top: 15px;
            height: 80px;
            min-width: 290px;
        }

        #{{ id }}-container .entity-item h4 {
            margin: 3px 0;
        }
    </style>

    <div id="{{ id }}-container"></div>

    <script type="text/javascript">
        require(['jquery',
            'oroform/js/multiple-entity', 'oroform/js/multiple-entity/collection', 'oroform/js/multiple-entity/model',
            'text!{{ asset('bundles/oroform/js/multiple-entity/templates/multiple-entities.html') }}',
            'text!{{ asset('bundles/oroform/js/multiple-entity/templates/multiple-entity.html') }}'
        ],
        function($, MultipleEntity, MultipleEntityCollection, MultipleEntityModel, EntitiesTpl, EntityTpl) {
            var widget = new MultipleEntity({
                el: '#{{ id }}-container',
                template: EntitiesTpl,
                elementTemplate: EntityTpl,
                addedElement: '#{{ id }}_added',
                removedElement: '#{{ id }}_removed',
                name: {{ id|json_encode|raw }},
                defaultElement: {{ form.vars.default_element|json_encode|raw }},
                selectionUrl: {{ form.vars.grid_url|json_encode|raw }},
                collection: new MultipleEntityCollection(),
                selectorWindowTitle: {{ form.vars.selector_window_title|trans|json_encode|raw }}
            });
            var data = [];
            {% for element in initial_elements %}
                data.push(new MultipleEntityModel({{ element|json_encode|raw }}));
            {% endfor %}
            widget.getCollection().reset(data);
        });
    </script>
{% endblock %}

{% block form_label %}
    {% spaceless %}
        {% if not compound %}
            {% set label_attr = label_attr|merge({'for': id}) %}
        {% endif %}
        {% if required %}
            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
        {% endif %}
        {% if errors|length > 0 %}
            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' validation-error')|trim}) %}
        {% endif %}
        {% if label is empty %}
            {% set label = name|humanize %}
        {% endif %}
        {% set isRadioLabel = form.parent.vars.expanded|default(false) and checked is defined %}
        <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
            {% if tooltip is defined and tooltip %}
                {% set tooltip = tooltip|trans %}
                {% if (tooltip_details_enabled is defined and tooltip_details_enabled)
                    or (tooltip_details_anchor is defined or tooltip_details_link is defined) %}
                    {% set helpLink = tooltip_details_link|default(get_help_link()) %}
                    {% if tooltip_details_anchor is defined and tooltip_details_anchor %}
                        {% set helpLink = helpLink ~ '#' ~ tooltip_details_anchor %}
                    {% endif %}
                    {% set tooltip = tooltip
                        ~ '<div class="clearfix"><div class="pull-right"><a href="' ~ helpLink ~ '">' ~ 'Read more'|trans ~ '</a></div></div>' %}
                {% endif %}
                <i class="icon-info-sign"
                    style="color: #6b92d0;font-size: 13px;"
                    {% if tooltip_placement is defined %}data-placement="{{ tooltip_placement }}"{% endif %}
                    data-content="{{ tooltip }}"
                    data-toggle="popover"></i>
            {%- endif -%}
            {%- if is_translated_label is defined and is_translated_label -%}
                {{ label }}
            {%- else -%}
                {{ label|trans({}, translation_domain)|capitalize }}
            {%- endif -%}
            <em>{% if required and not isRadioLabel %}*{% else %}&nbsp;{% endif %}</em>
        </label>
    {% endspaceless %}
{% endblock form_label %}

{% block oro_money_row %}
    {% set label = label|trans({}, translation_domain)|capitalize ~ ' (' ~ currency_symbol ~')' %}
    {{ form_row(form, {'type': 'text', 'label': label, 'is_translated_label': true}) }}
{% endblock %}

{% block oro_money_widget %}
    {% set type = type|default('text') %}
    {{ block('form_widget_simple') }}
{% endblock %}

{% block percent_row %}
    {% set label = label|trans({}, translation_domain)|capitalize ~ ' (%)' %}
    {{ form_row(form, {'type': 'text', 'label': label, 'is_translated_label': true}) }}
{% endblock %}

{% block percent_widget %}
    {% set type = type|default('text') %}
    {{ block('form_widget_simple') }}
{% endblock %}

{% block oro_date_widget %}
    {% set actual_id = id %}
    {% set selector_name = 'date_selector_' ~ id %}
    {% set selector_id = selector_name %}

    {# Actual date field that uses ISO format #}
    <span style="display:none">{{ block('date_widget') }}</span>

    {# Visible fake datepicker field that uses localized format #}
    {% set id = selector_id %}
    {% set full_name = selector_name %}
    <input type="text" {{ block('widget_attributes') }} />

    <script type="text/javascript">
        require(['jquery', 'orolocale/js/formatter/datetime', 'jquery-ui'],
        function($, datetimeFormatter) {
            var selector = $("#{{ selector_id }}");
            var actual = $("#{{ actual_id }}");
            var sync = function() {
                selector.val(datetimeFormatter.formatDate(actual.val()));
            };
            actual.on('change', sync);
            if (actual.val() && actual.val().length) {
                sync();
            }
            selector.datepicker({
                altField: '#{{ actual_id }}',
                altFormat: 'yy-mm-dd',
                changeMonth: true,
                changeYear: true,
                yearRange: '-80:+1',
                showButtonPanel: true
            });
            selector.keyup(
                function () {
                    var selectorValue = selector.val();
                    if (datetimeFormatter.isDateValid(selectorValue)) {
                        actual.val(datetimeFormatter.convertDateToBackendFormat(selectorValue));
                    } else {
                        actual.val('');
                    }
                }
            );
        });
    </script>
{% endblock oro_date_widget %}

{% block oro_datetime_widget %}
    {% set actual_id = id %}
    {% set selector_name = 'datetime_selector_' ~ id %}
    {% set selector_id = selector_name %}

    {# Actual date field that uses ISO format #}
    <span style="display:none">{{ block('datetime_widget') }}</span>

    {# Visible fake datetimepicker field that uses localized format #}
    {% set id = selector_id %}
    {% set full_name = selector_name %}
    <input type="text" {{ block('widget_attributes') }} />

    <script type="text/javascript">
        require(['jquery', 'orolocale/js/formatter/datetime', 'jquery-ui-timepicker'],
        function($, datetimeFormatter) {
            var selector = $("#{{ selector_id }}");
            var actual = $("#{{ actual_id }}");
            var sync = function() {
                selector.val(datetimeFormatter.formatDateTime(actual.val()));
            };
            actual.on('change', sync);
            if (actual.val() && actual.val().length) {
                sync();
            }
            selector.datetimepicker({
                altField: '#{{ actual_id }}',
                altFormat: 'yy-mm-dd',
                altTimeFormat: 'HH:mm:ssz',
                altFieldTimeOnly: false,
                altSeparator: 'T',
                changeMonth: true,
                changeYear: true,
                yearRange: '-80:+1',
                showButtonPanel: true
            });
            selector.keyup(
                function () {
                    var selectorValue = selector.val();
                    if (datetimeFormatter.isDateTimeValid(selectorValue)) {
                        actual.val(datetimeFormatter.convertDateTimeToBackendFormat(selectorValue));
                    } else {
                        actual.val('');
                    }
                }
            );
        });
    </script>
{% endblock oro_datetime_widget %}

{% macro oro_collection_item_prototype(widget) %}
    {% if 'prototype' in widget.vars|keys %}
        {% set form = widget.vars.prototype %}
        {% set name = widget.vars.prototype.vars.name %}
    {% else %}
        {% set form = widget %}
        {% set name = widget.vars.full_name %}
    {% endif %}
    <div data-content="{{ name }}" data-validation-optional-group>
        <div class="row-oro oro-multiselect-holder">
            {{ form_widget(form) }}
            <button class="removeRow btn btn-action btn-link" type="button" data-related="{{ name }}">×</button>
        </div>
    </div>
{% endmacro %}

{% block oro_collection_widget %}
    {% spaceless %}
        {% set prototypeHtml = _self.oro_collection_item_prototype(form) %}
        {% set attr = attr|merge({'class': (attr.class is defined ? attr.class ~ ' ' : '') ~ 'oro-item-collection collection-fields-list' }) %}
        {% set id = id ~ '_collection' %}
        <div class="row-oro">
            <div {{ block('widget_container_attributes') }} data-prototype="{{ prototypeHtml|escape }}">
                {% if form.children|length %}
                    {% for child in form.children %}
                        {{ _self.oro_collection_item_prototype(child) }}
                    {% endfor %}
                {% elseif show_form_when_empty %}
                    {{ prototypeHtml|replace({'__name__': '0'})|raw }}
                {% endif %}
            </div>
            <a class="btn add-list-item" href="javascript: void(0);"><i class="icon-plus"></i>{{ 'Add'|trans }}</a>
        </div>
        {{ _self.oro_collection_validate_primary_js(_context) }}
    {% endspaceless %}
{% endblock %}

{% macro oro_collection_validate_primary_js(context) %}
    {% if context.form.vars.prototype.primary is defined %}
        <script type="text/javascript">
            require(['jquery'],
            function($){
                $(function() {
                    var container = $('#{{ context.id }}');
                    /**
                     * Allow only 1 primary checkbox to be checked.
                     * This logic convert checkbox logic to logic used in radiobutton
                     */
                    container.on('click', '[name$="[primary]"]', function() {
                        container.find('[name$="[primary]"]').each(function (idx, el) {
                            el.checked = false;
                        });
                        this.checked = true;
                    });
                });
            });
        </script>
    {% endif %}
{% endmacro %}

{% block oro_form_js_validation %}
<script type="text/javascript">
    require(['jquery', 'jquery.validate'],
    function ($) {
        var options = {{ js_options ? js_options|json_encode|raw : '{}' }};
        $('#{{ form.vars.name }}').validate(options);
    });
</script>
{% endblock %}

{% block oro_entity_create_or_select_row %}
    {% set currentMode = form.mode.vars.value|default('create') %}
    {% set btnGroupId = form.vars.id ~ '-btn-group' %}
    {% set viewsContainerId = form.vars.id ~ '-container' %}
    {% set gridWidgetAlias = form.vars.id ~ '-grid' %}

    {{ form_errors(form) }}
    <div id="{{ viewsContainerId }}" class="responsive-section create-select-entity {{ currentMode }} clearfix">
        {{ block('oro_entity_create_or_select_label') }}
        {{ block('oro_entity_create_or_select_widget') }}
    </div>

    <script type="text/javascript">
        require(['jquery', 'oroform/js/create-select-type-handler'],
        function ($, createSelectTypeHandler) {
            $(function() {
                createSelectTypeHandler(
                    '#{{ btnGroupId }}',
                    '#{{ viewsContainerId }}',
                    '#{{ form.mode.vars.id }}',
                    '#{{ form.existing_entity.vars.id }}',
                    {{ gridWidgetAlias|json_encode|raw }},
                    {{ form.vars.view_widgets|json_encode|raw }},
                    {{ form.vars.existing_entity_grid_id|json_encode|raw }}
                );
            });
        });
    </script>
{% endblock %}

{% block oro_entity_create_or_select_label %}
    {% spaceless %}
        {% if label is not sameas(false) %}
            {% if label is empty %}
                {% set label = name|humanize %}
            {% endif %}
            <h5 class="user-fiedset">
                <span>{{ label|trans({}, translation_domain) }}</span>
                <div class="pull-right" id="{{ btnGroupId }}">
                    <div class="btn-group">
                        <button type="button" class="btn btn-small entity-select-btn">
                            <span
                                data-label="{{ 'Select Existing'|trans }}"
                                data-alt-label-view="{{ 'Select Another'|trans }}"
                            >
                                {% if currentMode == 'view' %}
                                {{ 'Select Another'|trans }}
                                {% else %}
                                {{ 'Select Existing'|trans }}
                                {% endif %}
                            </span>
                        </button>
                    </div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-small entity-cancel-btn">
                            <span>{{ 'Cancel'|trans }}</span>
                        </button>
                    </div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-small entity-create-btn btn-primary">
                            <span>{{ 'Create New'|trans }}</span>
                        </button>
                    </div>
                </div>
            </h5>
        {% endif %}
    {% endspaceless %}
{% endblock %}

{% block oro_entity_create_or_select_widget %}
    <div class="entity-create-block"
        {% if not form.vars.required %}data-validation-optional-group=""{% endif %}
        {% if currentMode != 'create' %}data-validation-ignore=""{% endif %}
    >
        {{ form_widget(form.new_entity) }}
    </div>

    <div class="entity-select-block">
        {{ oro_widget_render({
            'widgetType': 'block',
            'loadingElement': '#' ~ viewsContainerId,
            'elementFirst': currentMode == 'grid',
            'url': path('oro_datagrid_widget', {'gridName': form.vars.grid_name}),
            'alias': gridWidgetAlias
        }) }}
    </div>

    <div class="entity-view-block responsive-section">
        {% for view_widget in view_widgets %}
            <div class="responsive-block">
                {% set routeParameters = view_widget.route_parameters %}
                {{ oro_widget_render({
                    'widgetType': 'block',
                    'loadingElement': '#' ~ viewsContainerId,
                    'elementFirst': currentMode == 'view',
                    'url': currentMode == 'view' ? path(view_widget.route_name, routeParameters) : null,
                    'alias': view_widget.widget_alias,
                    'title': view_widget.title is defined ? view_widget.title|trans : null
                }) }}
            </div>
        {% endfor %}
    </div>

    {{ form_widget(form.existing_entity) }}
    {{ form_widget(form.mode) }}
{% endblock %}
